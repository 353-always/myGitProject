package thread_test;

/**
 * 线程的优先级
 * MAX_PRIORITY = 10
 * MIN_PRIORITY = 1
 * NORMAL_PRIORITY = 5
 *  getPriority()：获取当前线程优先级
 *  setPriority(int p)：设置当前线程优先级
 *
 *    说明：高优先级会请战低优先级cpu执行权，但只是会高概率执行，并不是一定会执行，并不是
 *    哎哟等高优先级线程全部完成，再执行低优先级线程
 *
 * @author God Man
 * @create 2020-02-12 19:30
 */

public class ThreadPriorityTest {
    public static void main(String[] args) {
        Thread1 t1 = new Thread1();
        Thread2 t2 = new Thread2();
//        t1.setPriority(1);
        t1.start();
        t2.start();

        for(int i = 1;i < 100;i++){
            try {
                t1.join();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            System.out.println(Thread.currentThread().getName() + " : " + i);
        }
    }
}

class Thread1 extends Thread{
    @Override
    public void run() {
        for(int i = 0;i < 100;i++){
            if(i % 2 == 0){
//                try {
//                    sleep(1);
//                } catch (InterruptedException e) {
//                    e.printStackTrace();
//                }
                System.out.println(Thread.currentThread().getName() + " : " + i + " : " + Thread.currentThread().getPriority());
            }
        }
    }
}

class Thread2 extends Thread{
    @Override
    public void run() {
        for(int i = 0;i < 100;i++){
            if(i % 2 != 0){
                yield();
                System.out.println(Thread.currentThread().getName() + " : " + i + " : " + Thread.currentThread().getPriority());
            }
        }
    }
}